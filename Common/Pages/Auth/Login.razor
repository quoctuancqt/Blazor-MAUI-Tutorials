@page "/login"
@layout LoginLayout

@*<h1 class="h2 font-weight-normal login-title">
    Login
</h1>*@

@if (ShowAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<EditForm class="card card-body bg-light mt-5" OnValidSubmit="OnSubmit" Model="loginRequest">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="email" class="sr-only">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" autofocus placeholder="Username" />
        <ValidationMessage For="@(() => loginRequest.Email)" class="text-danger" />
    </div>
    <div class="form-group">
        <label for="password" class="sr-only">Password</label>
        <InputText type="password" id="password" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
        <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger" />
    </div>
    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
</EditForm>

@code {
    [Inject]
    private NavigationManager _navigationManager { get; set; }

    [Inject]
    private IAuthService _authService { get; set; }

    public bool ShowAuthError { get; set; } = false;

    public string Error { get; set; }

    private LoginRequest loginRequest { get; set; } = new();

    async Task OnSubmit()
    {
        var result = await _authService.Login(loginRequest);

        if (result is not null)
        {
            _navigationManager.NavigateTo("/");
        }
        else
        {
            ShowAuthError = true;
            Error = "Invalid username or password";
        }
    }
}